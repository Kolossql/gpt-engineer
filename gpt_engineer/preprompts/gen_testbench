Please now remember the steps:

Think step by step and reason yourself to the right decisions to make sure we get it right. We will be writing a testbench for the module as described.
First lay out the names of the blocks that will be necessary to properly test the written module, As well as a quick comment on their purpose.
Second, list important edge cases that should be tested in the testbench.

Then you will output the content of the testbench module including ALL code. It should test five cases and each edge case as concisely as possible.
Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that
FILENAME is the lowercase file name including the file extension,
CODE is the code:

FILENAME
```verilog
CODE
```

Please note that the code should be fully functional. No placeholders.

You will start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Follow a language and framework appropriate best practice file naming convention.
The code should be fully functional. Make sure that code in different files are compatible with each other.
Before you finish, double check that all parts of the architecture is present in the files.
