The necessary blocks for testing the LFSR module are as follows:

1. LFSR Module: This is the module that needs to be tested. It generates pseudo-random numbers based on the given specifications.

2. Testbench Module: This module is responsible for providing inputs to the LFSR module, monitoring its outputs, and verifying the correctness of the generated pseudo-random numbers.

Important edge cases to be tested in the testbench:

1. Initial state: Verify that the LFSR module starts with the correct initial state (10001010).

2. Clock edge: Test the behavior of the LFSR module on every rising edge of the clock.

3. Active-low reset: Test the behavior of the LFSR module when the reset signal is activated.

4. Continuous generation: Verify that the LFSR module continuously generates pseudo-random numbers on every rising edge of the clock.

5. Output verification: Verify the correctness of the generated pseudo-random numbers by comparing them with the expected values.

Now, let's proceed with the implementation of the testbench module.

**testbench.v**
```verilog
module testbench;

  // Parameters
  parameter CLK_PERIOD = 1; // Clock period in ns

  // Signals
  reg clk;
  reg reset;
  wire [7:0] data_out;

  // Instantiate LFSR module
  LFSR lfsr (
    .clk(clk),
    .reset(reset),
    .data_out(data_out)
  );

  // Clock generation
  always begin
    #((CLK_PERIOD)/2);
    clk = ~clk;
  end

  // Reset generation
  initial begin
    reset = 1;
    #10;
    reset = 0;
  end

  // Test cases
  initial begin
    // Case 1: Initial state
    #10;
    $display("Case 1: Initial state");
    $display("Expected output: 10001010");
    $display("Actual output: %b", data_out);
    if (data_out === 8'b10001010)
      $display("Test Passed");
    else
      $display("Test Failed");

    // Case 2: Clock edge
    #10;
    $display("Case 2: Clock edge");
    $display("Expected output: 01000101");
    $display("Actual output: %b", data_out);
    if (data_out === 8'b01000101)
      $display("Test Passed");
    else
      $display("Test Failed");

    // Case 3: Active-low reset
    #10;
    $display("Case 3: Active-low reset");
    reset = 1;
    #10;
    reset = 0;
    $display("Expected output: 10001010");
    $display("Actual output: %b", data_out);
    if (data_out === 8'b10001010)
      $display("Test Passed");
    else
      $display("Test Failed");

    // Case 4: Continuous generation
    #10;
    $display("Case 4: Continuous generation");
    $display("Expected output: 01000101");
    $display("Actual output: %b", data_out);
    if (data_out === 8'b01000101)
      $display("Test Passed");
    else
      $display("Test Failed");

    // Case 5: Output verification
    #10;
    $display("Case 5: Output verification");
    $display("Expected output: 01000101");
    $display("Actual output: %b", data_out);
    if (data_out === 8'b01000101)
      $display("Test Passed");
    else
      $display("Test Failed");

    // End simulation
    #10;
    $finish;
  end

endmodule
```

This testbench module tests the LFSR module with five different cases:

1. Initial state: Verifies that the LFSR module starts with the correct initial state (10001010).

2. Clock edge: Tests the behavior of the LFSR module on every rising edge of the clock.

3. Active-low reset: Tests the behavior of the LFSR module when the reset signal is activated.

4. Continuous generation: Verifies that the LFSR module continuously generates pseudo-random numbers on every rising edge of the clock.

5. Output verification: Verifies the correctness of the generated pseudo-random numbers by comparing them with the expected values.

The testbench module instantiates the LFSR module and provides inputs (clock and reset) to it. It also monitors the output (data_out) of the LFSR module and verifies the correctness of the generated pseudo-random numbers using display statements.

To run the testbench and verify the output, you can use a Verilog simulator such as ModelSim or Icarus Verilog. Additionally, you can use a waveform viewer like GTKWave to visualize the waveforms and observe the behavior of the LFSR module.