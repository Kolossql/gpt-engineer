The necessary blocks for testing the shift register module are as follows:

1. Testbench module: This module will instantiate the shift register module and provide the necessary inputs for testing.
2. Clock generator: This block will generate the clock signal for the testbench module.
3. Stimulus generator: This block will generate the input stimuli for the shift register module.
4. Monitor: This block will monitor the outputs of the shift register module and display them for verification.

Important edge cases to test in the testbench:

1. Clock signal with varying frequencies.
2. Active-low reset signal activation and deactivation.
3. Different input data patterns.
4. Shift enable signal activation and deactivation.
5. Testing the output when the data is changed.

Now, let's proceed with the content of the testbench module:

**shift_register_tb.v**
```verilog
module shift_register_tb;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Inputs
  reg clk;
  reg reset;
  reg data;
  reg shift_enable;

  // Outputs
  wire [7:0] stored_data;

  // Instantiate the shift register module
  shift_register dut (
    .clk(clk),
    .reset(reset),
    .data(data),
    .shift_enable(shift_enable),
    .stored_data(stored_data)
  );

  // Clock generator
  always #((CLK_PERIOD)/2) clk = ~clk;

  // Stimulus generator
  initial begin
    // Initialize inputs
    reset = 1;
    data = 0;
    shift_enable = 0;

    // Wait for reset to deactivate
    #((CLK_PERIOD)*10);
    reset = 0;

    // Test case 1: Shift enable inactive
    #((CLK_PERIOD)*10);
    shift_enable = 0;
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;

    // Test case 2: Shift enable active
    #((CLK_PERIOD)*10);
    shift_enable = 1;
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;

    // Test case 3: Active-low reset
    #((CLK_PERIOD)*10);
    reset = 1;
    #((CLK_PERIOD)*10);
    reset = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;

    // Test case 4: Varying clock frequency
    #((CLK_PERIOD)*5);
    shift_enable = 1;
    data = 1;
    #((CLK_PERIOD)*5);
    data = 0;
    #((CLK_PERIOD)*5);
    data = 1;
    #((CLK_PERIOD)*5);
    data = 0;
    #((CLK_PERIOD)*5);
    data = 1;
    #((CLK_PERIOD)*5);
    data = 0;
    #((CLK_PERIOD)*5);
    data = 1;
    #((CLK_PERIOD)*5);
    data = 0;
    #((CLK_PERIOD)*5);
    data = 1;
    #((CLK_PERIOD)*5);
    data = 0;

    // Test case 5: Output when data is changed
    #((CLK_PERIOD)*10);
    shift_enable = 1;
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;
    #((CLK_PERIOD)*10);
    data = 1;
    #((CLK_PERIOD)*10);
    data = 0;

    // End simulation
    #((CLK_PERIOD)*10);
    $finish;
  end

  // Monitor
  always @(posedge clk) begin
    $display("Stored Data: %b", stored_data);
  end

endmodule
```

This testbench module tests five cases:
1. Shift enable inactive.
2. Shift enable active.
3. Active-low reset.
4. Varying clock frequency.
5. Output when data is changed.

The testbench module generates the necessary clock signal, provides input stimuli, and monitors the output stored data. The test cases are executed sequentially, with appropriate delays between input changes. The output is displayed using the `$display` statement.

Please note that the testbench assumes a clock period of 10 ns. You can adjust the `CLK_PERIOD` parameter to match your desired clock frequency.