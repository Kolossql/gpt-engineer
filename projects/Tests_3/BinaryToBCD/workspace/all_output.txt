The blocks necessary to properly test the binary to BCD converter module are as follows:

1. Testbench module: This module will instantiate the binary to BCD converter module and provide stimulus to its inputs. It will also monitor the outputs and compare them with expected values to verify the correctness of the converter module.

2. Clock generator: This block will generate the clock signal required for the operation of the modules. It can be a simple Verilog module that generates a clock signal with a specified frequency.

3. Stimulus generator: This block will generate different test cases for the binary input to be fed into the binary to BCD converter module. It can be a separate module or part of the testbench module itself.

4. Monitor: This block will monitor the outputs of the binary to BCD converter module and compare them with expected values. It will generate pass/fail signals based on the comparison results.

Important edge cases to be tested in the testbench:

1. Minimum input value (0): Test the conversion of the minimum binary input value to BCD.

2. Maximum input value (255): Test the conversion of the maximum binary input value to BCD.

3. Random input values: Test the conversion of random binary input values to BCD.

4. Input values with leading zeros: Test the conversion of binary input values with leading zeros to BCD.

5. Input values with all ones: Test the conversion of binary input values with all ones to BCD.

Now, let's proceed with the implementation of the testbench module:

**testbench.v**
```verilog
module testbench;

  // Inputs
  reg [7:0] binary_input;
  
  // Outputs
  wire [11:0] bcd_output;
  
  // Instantiate the binary to BCD converter module
  binary_to_bcd_converter dut (
    .binary_input(binary_input),
    .bcd_output(bcd_output)
  );
  
  // Clock signal generation
  reg clk;
  always #5 clk = ~clk;
  
  // Stimulus generation
  initial begin
    // Initialize inputs
    binary_input = 0;
    
    // Apply stimulus
    #10 binary_input = 0; // Test case 1: Minimum input value (0)
    #10 binary_input = 255; // Test case 2: Maximum input value (255)
    #10 binary_input = 42; // Test case 3: Random input value
    #10 binary_input = 6; // Test case 4: Input value with leading zeros
    #10 binary_input = 255; // Test case 5: Input value with all ones
    
    // Finish simulation
    #10 $finish;
  end
  
  // Monitor outputs and verify correctness
  always @(posedge clk) begin
    // Expected BCD values for the test cases
    reg [11:0] expected_bcd_output [5:1] = {
      12'b000000000000, // Expected BCD output for test case 1
      12'b000000000111, // Expected BCD output for test case 2
      12'b000000010010, // Expected BCD output for test case 3
      12'b000000000110, // Expected BCD output for test case 4
      12'b000000000111  // Expected BCD output for test case 5
    };
    
    // Verify correctness of the BCD output
    if (bcd_output === expected_bcd_output[1]) begin
      $display("Test case 1: Passed");
    end else begin
      $display("Test case 1: Failed");
    end
    
    if (bcd_output === expected_bcd_output[2]) begin
      $display("Test case 2: Passed");
    end else begin
      $display("Test case 2: Failed");
    end
    
    if (bcd_output === expected_bcd_output[3]) begin
      $display("Test case 3: Passed");
    end else begin
      $display("Test case 3: Failed");
    end
    
    if (bcd_output === expected_bcd_output[4]) begin
      $display("Test case 4: Passed");
    end else begin
      $display("Test case 4: Failed");
    end
    
    if (bcd_output === expected_bcd_output[5]) begin
      $display("Test case 5: Passed");
    end else begin
      $display("Test case 5: Failed");
    end
  end
  
  // Dump waveform for visualization
  initial begin
    $dumpfile("WaveOutput.vcd");
    $dumpvars(0, testbench);
  end
  
endmodule
```

Please note that the above code assumes that the binary to BCD converter module is named `binary_to_bcd_converter` and has inputs `binary_input` and outputs `bcd_output`. The expected BCD output values for each test case are stored in the `expected_bcd_output` array.

The testbench module generates a clock signal, applies stimulus to the binary input, monitors the BCD output, compares it with the expected values, and displays the pass/fail results. It also dumps the waveform for visualization using `gtkwave`.

Make sure to include the necessary Verilog files for the binary to BCD converter module and any other modules used in the testbench.