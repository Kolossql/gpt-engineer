The necessary blocks for testing the Verilog module are as follows:

1. Testbench module: This module will instantiate the binary to BCD converter module and provide stimulus to its inputs. It will also verify the correctness of the output BCD values.

The important edge cases to be tested in the testbench are as follows:

1. Minimum input value (0): Test the conversion of the minimum input value (0) to BCD.
2. Maximum input value (255): Test the conversion of the maximum input value (255) to BCD.
3. Random input value: Test the conversion of a random input value (e.g., 123) to BCD.
4. Input value with leading zeros: Test the conversion of an input value with leading zeros (e.g., 00101010) to BCD.
5. Input value with all ones: Test the conversion of an input value with all ones (e.g., 11111111) to BCD.

Now, let's proceed with the implementation of the testbench module:

**testbench.v**
```verilog
module testbench;
  
  // Inputs
  reg [7:0] binary_input;
  
  // Outputs
  wire [11:0] bcd_output;
  
  // Instantiate the module under test
  binary_to_bcd_converter dut (
    .binary_input(binary_input),
    .bcd_output(bcd_output)
  );
  
  // Clock generation
  reg clk;
  always #5 clk = ~clk;
  
  // Stimulus generation
  initial begin
    $dumpfile("WaveOutput.vcd");
    $dumpvars(1, testbench);
    
    // Initialize inputs
    binary_input = 0;
    
    // Apply stimulus
    #10 binary_input = 0; // Minimum input value (0)
    #10 binary_input = 255; // Maximum input value (255)
    #10 binary_input = 123; // Random input value
    #10 binary_input = 42; // Input value with leading zeros
    #10 binary_input = 255; // Input value with all ones
    
    // Finish simulation
    #10 $finish;
  end
  
  // Display output BCD values
  always @(posedge clk) begin
    $display("Binary Input: %b, BCD Output: %b", binary_input, bcd_output);
  end
  
endmodule
```

In the above testbench module, we have instantiated the binary to BCD converter module (`binary_to_bcd_converter`) and provided stimulus to its inputs (`binary_input`). The output BCD values (`bcd_output`) are displayed using the `$display` statement.

The testbench module tests five cases, including the important edge cases mentioned earlier. It also includes the necessary lines to generate the waveform output file (`WaveOutput.vcd`) and dump the variables for waveform visualization.

Please note that the code provided assumes that the Verilog module for the binary to BCD converter (`binary_to_bcd_converter`) has been implemented separately.