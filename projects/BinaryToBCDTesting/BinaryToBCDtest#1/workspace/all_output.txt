The blocks necessary to properly test the binary to BCD converter module are:
1. Binary to BCD Converter Module: This is the module that needs to be tested. It takes a 5-bit binary input and converts it to an 8-bit BCD output.
2. Testbench Module: This module is responsible for generating the test inputs, applying them to the binary to BCD converter module, and verifying the correctness of the output.

Important edge cases to be tested in the testbench:
1. Minimum input value (0 in binary) should result in BCD output of 00000000.
2. Maximum input value (255 in binary) should result in BCD output of 00101001.
3. Input value with all bits set to 1 (31 in binary) should result in BCD output of 00001111.
4. Input value with all bits set to 0 (0 in binary) should result in BCD output of 00000000.
5. Random input value (e.g., 11010 in binary) should result in the corresponding BCD output.

Now, let's proceed with the content of the testbench module:

**testbench.v**
```verilog
module testbench;

  // Inputs
  reg [4:0] binary_input;
  
  // Outputs
  wire [7:0] bcd_output;
  
  // Instantiate the binary to BCD converter module
  binary_to_bcd_converter dut (
    .binary_input(binary_input),
    .bcd_output(bcd_output)
  );
  
  // Clock generation
  reg clk;
  always #5 clk = ~clk;
  
  // Test inputs
  initial begin
    clk = 0;
    binary_input = 5'b00000; // Minimum input value
    #10;
    binary_input = 5'b11111; // Maximum input value
    #10;
    binary_input = 5'b11111; // All bits set to 1
    #10;
    binary_input = 5'b00000; // All bits set to 0
    #10;
    binary_input = 5'b11010; // Random input value
    #10;
    $finish;
  end
  
  // Display statements for verification
  always @(posedge clk) begin
    $display("Binary Input: %b", binary_input);
    $display("BCD Output: %b", bcd_output);
  end
  
  // Dump waveform for visualization
  initial begin
    $dumpfile("WaveOutput.vcd");
    $dumpvars(1, testbench);
  end
  
endmodule
```

In the above testbench module, we have instantiated the binary to BCD converter module and connected its inputs and outputs. We have also generated a clock signal and provided test inputs for different cases. The display statements are used to verify the correctness of the output, and the waveform is dumped for visualization using gtkwave.

Please note that the testbench assumes the existence of the "binary_to_bcd_converter" module, which should be implemented separately.