[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core modules, blocks that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nYou almost always put different classes in different files.\nFor Verilog, you always create a complete testbench for each modules. \nYou try to add comments explaining very complex bits of logic.\nYou always follow the best practices for the requested languages in terms of describing the code written as a defined\npackage/project.", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "I am trying to create a Behavioral Verilog module for a binary to binary-coded-decimal converter. Use the Double Dabble algorithm to compute the conversion. It must meet the following specifications:\nInputs:\nBinary input (8-bits): Binary number between 0-255\nOutputs:\nBCD (12-bits): 4-bits for the 100's place, 4-bits for the 10's place, and 4-bits for the 1's place", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "- Clarification needed on the expected behavior when the binary input is outside the range of 0-255.\n- Need to specify the behavior of the system during invalid input scenarios.\n- Need to define the timing constraints for the conversion process.\n- Need to clarify if there are any power or performance requirements for the module.\n- Need to specify the required precision and accuracy of the conversion.\n- Need to clarify if there are any specific requirements for the handling of overflow or underflow conditions.\n- Need to specify the expected behavior of the system during power-up and power-down scenarios.\n- Need to clarify if there are any specific requirements for the handling of error conditions.", "additional_kwargs": {}, "example": false}}, {"type": "human", "data": {"content": "Make your own assumptions and state them explicitly before starting", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "Assumptions:\n\n1. If the binary input is outside the range of 0-255, the system will ignore the input and not perform any conversion.\n2. The system is not expected to handle any invalid input scenarios.\n3. The conversion process does not have any specific timing constraints.\n4. There are no specific power or performance requirements for the module.\n5. The required precision and accuracy of the conversion is 100%.\n6. The system will handle overflow or underflow conditions by resetting the output to zero.\n7. Upon power-up, the system will initialize all outputs to zero. Upon power-down, the system will maintain the last output state.\n8. The system will not handle any specific error conditions.", "additional_kwargs": {}, "example": false}}, {"type": "human", "data": {"content": "You will read specifications but not carry them out instead generate a blackbox reference with the following details of the module. Do not write any other description besides what is included in the following format. Do not write any code.\nIn this format ModuleName is the exact name of the module. type is the type of the input or output on the same line. size is the size of the input or output on the same line. Size should be in the format [(bits-1):0]. Size should not be included if the size is 1 bit. name is the exact name of the input or output on the same line.\nFollow the format of the following:\n\nModuleName\n{ \n    //comment on the following input\n    input type size name\n}\n{\n    output type size name\n}", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "BinaryToBCD\n{ \n    //8-bit binary input\n    input wire [7:0] binary_input\n}\n{\n    //12-bit BCD output\n    output wire [11:0] BCD_output\n}", "additional_kwargs": {}, "example": false}}]