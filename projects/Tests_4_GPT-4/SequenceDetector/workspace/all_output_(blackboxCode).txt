The core blocks necessary for the sequence detector are:

- State Machine: This block will keep track of the current state of the sequence detector. It will transition between states based on the input data and the current state.

- Sequence Checker: This block will check if the current input data matches the expected data for the current state. If it does, it will signal the state machine to transition to the next state.

- Reset Handler: This block will handle the active-low reset signal. When the reset signal is active, it will reset the state machine to the initial state.

Now, let's write the Verilog code for the sequence detector.

sequencedetector.v
```verilog
module SequenceDetector (
    input wire clk,
    input wire reset_n,
    input wire [2:0] data,
    output reg sequence_found
);

    // Define the states
    typedef enum reg [2:0] {S0, S1, S2, S3, S4, S5, S6, S7, S8} state_t;
    state_t state, next_state;

    // State Machine
    always @(posedge clk or negedge reset_n) begin
        if (!reset_n)
            state <= S0;
        else
            state <= next_state;
    end

    // Sequence Checker and Next State Logic
    always @* begin
        sequence_found = 0;
        case (state)
            S0: if (data == 3'b001) next_state = S1; else next_state = S0;
            S1: if (data == 3'b101) next_state = S2; else next_state = S0;
            S2: if (data == 3'b110) next_state = S3; else next_state = S0;
            S3: if (data == 3'b000) next_state = S4; else next_state = S0;
            S4: if (data == 3'b110) next_state = S5; else next_state = S0;
            S5: if (data == 3'b110) next_state = S6; else next_state = S0;
            S6: if (data == 3'b011) next_state = S7; else next_state = S0;
            S7: if (data == 3'b101) begin next_state = S0; sequence_found = 1; end else next_state = S0;
            default: next_state = S0;
        endcase
    end

endmodule
```
This code implements a finite state machine to detect the specified sequence. The state machine has 8 states corresponding to the 8 elements of the sequence. The state machine transitions between states based on the input data. If the input data matches the expected data for the current state, the state machine transitions to the next state. If the input data does not match, the state machine transitions back to the initial state. When the state machine reaches the final state and the input data matches the final element of the sequence, the 'sequence_found' output is set to 1. The state machine is reset to the initial state when the active-low reset signal is active.