The necessary blocks for testing the module are:
1. Testbench module: This module will instantiate the module under test and provide stimulus to its inputs. It will also monitor the outputs and check if they are correct.
2. Clock generator: This block will generate the clock signal for the testbench module.
3. Reset generator: This block will generate the active-low reset signal for the testbench module.
4. Stimulus generator: This block will generate the stimulus for the inputs of the module under test.
5. Monitor: This block will monitor the outputs of the module under test and check if they are correct.

Important edge cases to test in the testbench:
1. Initial state: Verify that the module starts with the correct initial state (4-sided die, roll set to 0).
2. Clock edge: Test the behavior of the module when the clock is not on a rising edge.
3. Roll input low: Test the behavior of the module when the roll input is low.
4. Invalid die select: Test the behavior of the module when the die select input is not one of the specified values (00, 01, 10, 11).
5. Random number generation: Verify that the module generates the correct random number for each die select value.

Now I will provide the content of the testbench module:

testbench.v
```verilog
module testbench;
  
  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns
  
  // Signals
  reg clk;
  reg reset;
  reg [1:0] die_select;
  reg roll;
  wire [7:0] rolled_number;
  
  // Instantiate the module under test
  dice_roller dut (
    .clk(clk),
    .reset(reset),
    .die_select(die_select),
    .roll(roll),
    .rolled_number(rolled_number)
  );
  
  // Clock generator
  always begin
    clk = 0;
    #CLK_PERIOD/2;
    clk = 1;
    #CLK_PERIOD/2;
  end
  
  // Reset generator
  initial begin
    reset = 0;
    #10;
    reset = 1;
    #20;
    reset = 0;
  end
  
  // Stimulus generator
  initial begin
    // Test initial state
    #10;
    $display("Initial state:");
    $display("Die select: %b", die_select);
    $display("Roll: %b", roll);
    $display("Rolled number: %d", rolled_number);
    
    // Test clock edge
    #10;
    $display("Clock edge:");
    roll = 1;
    #10;
    roll = 0;
    #10;
    roll = 1;
    #10;
    roll = 0;
    
    // Test roll input low
    #10;
    $display("Roll input low:");
    roll = 0;
    #10;
    roll = 1;
    #10;
    roll = 0;
    
    // Test invalid die select
    #10;
    $display("Invalid die select:");
    die_select = 2'b11;
    roll = 1;
    #10;
    die_select = 2'b00;
    roll = 1;
    #10;
    die_select = 2'b01;
    roll = 1;
    #10;
    die_select = 2'b10;
    roll = 1;
    
    // Test random number generation
    #10;
    $display("Random number generation:");
    die_select = 2'b00;
    roll = 1;
    #10;
    die_select = 2'b01;
    roll = 1;
    #10;
    die_select = 2'b10;
    roll = 1;
    #10;
    die_select = 2'b11;
    roll = 1;
    
    // End simulation
    #10;
    $finish;
  end
  
  // Monitor
  always @(posedge clk) begin
    $display("Rolled number: %d", rolled_number);
  end
  
endmodule
```

This testbench module tests the following cases:
1. Initial state: It checks if the module starts with the correct initial state.
2. Clock edge: It tests the behavior of the module when the clock is not on a rising edge.
3. Roll input low: It tests the behavior of the module when the roll input is low.
4. Invalid die select: It tests the behavior of the module when the die select input is not one of the specified values.
5. Random number generation: It verifies that the module generates the correct random number for each die select value.

The testbench module instantiates the module under test (`dice_roller`) and provides stimulus to its inputs (`clk`, `reset`, `die_select`, `roll`). It also monitors the output (`rolled_number`) and checks if it is correct. The clock generator generates the clock signal, the reset generator generates the active-low reset signal, and the stimulus generator generates the stimulus for the inputs. The monitor displays the value of the rolled number on every clock edge.