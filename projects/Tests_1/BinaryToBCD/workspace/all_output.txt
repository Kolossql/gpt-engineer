Based on the requirements, the core module for the binary to binary-coded-decimal converter can be implemented as a combinational logic circuit. There is no need for any additional modules or blocks.

The entrypoint file for the Verilog module will be named `binary_to_bcd_converter.v`.

The content of the `binary_to_bcd_converter.v` file is as follows:

```verilog
module binary_to_bcd_converter (
  input [4:0] binary_input,
  output reg [7:0] bcd_output
);

  always @* begin
    case (binary_input)
      5'b00000: bcd_output = 8'b00000000;
      5'b00001: bcd_output = 8'b00000001;
      5'b00010: bcd_output = 8'b00000010;
      5'b00011: bcd_output = 8'b00000011;
      5'b00100: bcd_output = 8'b00000100;
      5'b00101: bcd_output = 8'b00000101;
      5'b00110: bcd_output = 8'b00000110;
      5'b00111: bcd_output = 8'b00000111;
      5'b01000: bcd_output = 8'b00001000;
      5'b01001: bcd_output = 8'b00001001;
      5'b01010: bcd_output = 8'b00010000;
      5'b01011: bcd_output = 8'b00010001;
      5'b01100: bcd_output = 8'b00010010;
      5'b01101: bcd_output = 8'b00010011;
      5'b01110: bcd_output = 8'b00010100;
      5'b01111: bcd_output = 8'b00010101;
      5'b10000: bcd_output = 8'b00011000;
      5'b10001: bcd_output = 8'b00011001;
      5'b10010: bcd_output = 8'b00100000;
      5'b10011: bcd_output = 8'b00100001;
      5'b10100: bcd_output = 8'b00100010;
      5'b10101: bcd_output = 8'b00100011;
      5'b10110: bcd_output = 8'b00100100;
      5'b10111: bcd_output = 8'b00100101;
      5'b11000: bcd_output = 8'b00101000;
      5'b11001: bcd_output = 8'b00101001;
      5'b11010: bcd_output = 8'b00110000;
      5'b11011: bcd_output = 8'b00110001;
      5'b11100: bcd_output = 8'b00110010;
      5'b11101: bcd_output = 8'b00110011;
      5'b11110: bcd_output = 8'b00110100;
      5'b11111: bcd_output = 8'b00110101;
      default: bcd_output = 8'b00000000;
    endcase
  end

endmodule
```

The `binary_to_bcd_converter` module takes a 5-bit binary input and converts it to an 8-bit BCD output. The conversion is implemented using a case statement, where each possible binary input value is mapped to the corresponding BCD output value.

The BCD output is represented as an 8-bit value, with the 4 most significant bits representing the 10's place and the 4 least significant bits representing the 1's place.

The module is implemented as combinational logic using the `always @*` construct, which means that the BCD output will be updated whenever there is a change in the binary input.

The default case in the case statement is used to handle any invalid binary input values and sets the BCD output to all zeros.

This completes the implementation of the binary to binary-coded-decimal converter module.