The necessary blocks for testing the module are as follows:

1. Testbench module: This module will instantiate the sequence detector module and provide stimulus to its inputs. It will also monitor the outputs of the sequence detector module and verify their correctness.

Important edge cases to test in the testbench:

1. Testing the sequence detection when the sequence is found.
2. Testing the sequence detection when the sequence is not found.
3. Testing the sequence detection when the sequence is partially found.
4. Testing the sequence detection when the sequence is found multiple times.
5. Testing the sequence detection with different input sequences.

Here is the content of the testbench module:

testbench.v
```verilog
module testbench;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Inputs
  reg clk;
  reg reset;
  reg [2:0] data;

  // Outputs
  wire sequence_found;

  // Instantiate the sequence detector module
  sequence_detector dut (
    .clk(clk),
    .reset(reset),
    .data(data),
    .sequence_found(sequence_found)
  );

  // Clock generation
  always #((CLK_PERIOD)/2) clk = ~clk;

  // Test stimulus
  initial begin
    // Initialize inputs
    reset = 1;
    data = 0;

    // Wait for a few clock cycles
    #((CLK_PERIOD)*10);

    // Deassert reset
    reset = 0;

    // Test case 1: Sequence is found
    #((CLK_PERIOD)*10);
    data = 3'b001;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b000;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);

    // Test case 2: Sequence is not found
    data = 3'b000;
    #((CLK_PERIOD)*10);
    data = 3'b001;
    #((CLK_PERIOD)*10);
    data = 3'b010;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);

    // Test case 3: Partial sequence is found
    data = 3'b001;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b010;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);

    // Test case 4: Sequence is found multiple times
    data = 3'b001;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b000;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b001;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b000;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);

    // Test case 5: Different input sequences
    data = 3'b001;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b000;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b010;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b001;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b000;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b110;
    #((CLK_PERIOD)*10);
    data = 3'b011;
    #((CLK_PERIOD)*10);
    data = 3'b101;
    #((CLK_PERIOD)*10);

    // End simulation
    $finish;
  end

endmodule
```

Please note that the testbench assumes that the sequence detector module is named "sequence_detector" and has the specified inputs and outputs. The clock period is set to 10 ns, but it can be adjusted as needed. The testbench provides stimulus to the inputs of the sequence detector module and verifies the correctness of the sequence_found output. Each test case is separated by a delay of 10 clock cycles.