module traffic_light_module (
  input wire clk,
  input wire reset,
  input wire enable,
  output wire red,
  output wire yellow,
  output wire green
);

  // Define the states
  typedef enum logic [1:0] {
    STATE_RED,
    STATE_GREEN,
    STATE_YELLOW
  } state_t;

  // Define the state register
  reg state_t current_state;
  reg [4:0] counter;

  // Output assignment
  assign red = (current_state == STATE_RED) ? 1'b1 : 1'b0;
  assign yellow = (current_state == STATE_YELLOW) ? 1'b1 : 1'b0;
  assign green = (current_state == STATE_GREEN) ? 1'b1 : 1'b0;

  // State machine logic
  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= STATE_RED;
      counter <= 5'b0;
    end else if (enable) begin
      case (current_state)
        STATE_RED: begin
          if (counter == 5'b11111) begin
            current_state <= STATE_GREEN;
            counter <= 5'b0;
          end else begin
            counter <= counter + 1;
          end
        end
        STATE_GREEN: begin
          if (counter == 5'b10011) begin
            current_state <= STATE_YELLOW;
            counter <= 5'b0;
          end else begin
            counter <= counter + 1;
          end
        end
        STATE_YELLOW: begin
          if (counter == 5'b00111) begin
            current_state <= STATE_RED;
            counter <= 5'b0;
          end else begin
            counter <= counter + 1;
          end
        end
      endcase
    end
  end

endmodule
