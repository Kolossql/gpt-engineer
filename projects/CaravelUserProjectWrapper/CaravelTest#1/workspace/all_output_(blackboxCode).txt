The core block necessary for the traffic light state machine is the "TrafficLightModule". This module will implement the behavior of the traffic light and handle the state transitions based on the specified timing.

Here is the content of the "traffic_light_module.v" file:

traffic_light_module.v
```verilog
module TrafficLightModule(
    input wire clk,
    input wire reset_n,
    input wire enable,
    output wire red,
    output wire yellow,
    output wire green
);

    // Define the states of the traffic light
    parameter IDLE = 2'b00;
    parameter RED = 2'b01;
    parameter GREEN = 2'b10;
    parameter YELLOW = 2'b11;

    // Internal state register
    reg [1:0] state;

    // Counter for clock cycles
    reg [5:0] counter;

    // Output assignments
    assign red = (state == RED) ? 1'b1 : 1'b0;
    assign yellow = (state == YELLOW) ? 1'b1 : 1'b0;
    assign green = (state == GREEN) ? 1'b1 : 1'b0;

    // State machine logic
    always @(posedge clk or negedge reset_n) begin
        if (~reset_n) begin
            // Reset to initial state
            state <= IDLE;
            counter <= 6'd0;
        end else if (enable) begin
            // State transition logic
            case (state)
                IDLE: begin
                    if (counter == 6'd31) begin
                        state <= GREEN;
                        counter <= 6'd0;
                    end else begin
                        state <= IDLE;
                        counter <= counter + 1;
                    end
                end
                GREEN: begin
                    if (counter == 6'd19) begin
                        state <= YELLOW;
                        counter <= 6'd0;
                    end else begin
                        state <= GREEN;
                        counter <= counter + 1;
                    end
                end
                YELLOW: begin
                    if (counter == 6'd6) begin
                        state <= RED;
                        counter <= 6'd0;
                    end else begin
                        state <= YELLOW;
                        counter <= counter + 1;
                    end
                end
                RED: begin
                    if (counter == 6'd0) begin
                        state <= IDLE;
                        counter <= 6'd0;
                    end else begin
                        state <= RED;
                        counter <= counter + 1;
                    end
                end
                default: begin
                    state <= IDLE;
                    counter <= 6'd0;
                end
            endcase
        end else begin
            // Pause state transitions when enable is low
            state <= state;
            counter <= counter;
        end
    end

endmodule
```

The "TrafficLightModule" module implements the traffic light state machine. It has inputs for the clock signal, active-low reset, and enable signal. It also has outputs for the red, yellow, and green signals.

The module defines four states: IDLE, RED, GREEN, and YELLOW. It uses a state register and a counter to keep track of the current state and the number of clock cycles. The output assignments are based on the current state.

The state machine logic is implemented using an "always" block that triggers on the positive edge of the clock signal or the negative edge of the reset signal. It handles the state transitions based on the specified timing. When the enable signal is low, the state transitions are paused.

The module follows the Verilog 2005 standard and does not use any SystemVerilog features. It is a single synthesizable module without the use of initial blocks or non-synthesizable functions.