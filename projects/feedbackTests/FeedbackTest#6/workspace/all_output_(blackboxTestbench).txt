Blocks necessary for testing the SequenceGenerator module:
1. Clock generator: To provide a clock signal for the module.
2. Reset generator: To generate the active-low reset signal for the module.
3. Enable generator: To generate the enable signal for the module.
4. Data checker: To compare the output data from the module with the expected values and display the test results.
5. Testbench: The main testbench module that instantiates the SequenceGenerator module and the necessary generators and checks the output data.

Important edge cases to test in the testbench:
1. Testing the initial state of the sequence generator.
2. Testing the sequence generation when the enable signal is low.
3. Testing the sequence generation when the enable signal is high.
4. Testing the sequence generation with different clock frequencies.
5. Testing the sequence generation with different reset timings.

Testbench module for the SequenceGenerator module:

testbench.v
```verilog
module testbench;

  // Inputs
  reg clk;
  reg reset;
  reg enable;

  // Outputs
  wire [7:0] data;

  // Instantiate SequenceGenerator module
  SequenceGenerator dut (
    .clk(clk),
    .reset(reset),
    .enable(enable),
    .data(data)
  );

  // Clock generator
  always #5 clk = ~clk;

  // Reset generator
  initial begin
    reset = 1;
    #10 reset = 0;
  end

  // Enable generator
  initial begin
    enable = 0;
    #20 enable = 1;
    #100 enable = 0;
    #50 enable = 1;
    #200 enable = 0;
    #30 enable = 1;
    #150 enable = 0;
  end

  // Data checker
  initial begin
    // Test 1: Initial state
    if (data === 8'hAF) begin
      $display("Test 1 Passed");
    end else begin
      $display("Test 1 Failed");
    end

    // Test 2: Enable low
    #100;
    if (data === 8'hAF) begin
      $display("Test 2 Passed");
    end else begin
      $display("Test 2 Failed");
    end

    // Test 3: Enable high
    #100;
    if (data === 8'hBC) begin
      $display("Test 3 Passed");
    end else begin
      $display("Test 3 Failed");
    end

    // Test 4: Clock frequency
    #100;
    if (data === 8'hE2) begin
      $display("Test 4 Passed");
    end else begin
      $display("Test 4 Failed");
    end

    // Test 5: Reset timing
    #100;
    if (data === 8'hAF) begin
      $display("Test 5 Passed");
    end else begin
      $display("Test 5 Failed");
    end

    // Finish simulation
    $finish;
  end

  // Dump waveform
  initial begin
    $dumpfile("WaveOutput.vcd");
    $dumpvars(0, testbench);
  end

endmodule
```

Note: The testbench assumes that the SequenceGenerator module is defined in a separate file named "SequenceGenerator.v".