The core blocks necessary for this task are:

1. State Machine: This block will keep track of the current state of the sequence. It will have 8 states, one for each element of the sequence and an initial state.

2. Sequence Detector: This block will check the incoming data against the current state of the sequence. If the data matches the current state, it will move to the next state. If the data does not match, it will return to the initial state.

3. Output Register: This block will hold the 'sequence found' output. It will be set to '1' when the last element of the sequence is detected and '0' otherwise.

Now, let's write the Verilog code for this module.

sequencedetector.v
```verilog
module SequenceDetector (
    input wire clk,
    input wire reset_n,
    input wire [2:0] data_in,
    output reg sequence_found
);

    // Define the states
    typedef enum reg [3:0] {S0, S1, S2, S3, S4, S5, S6, S7, S8} state_t;
    state_t current_state, next_state;

    // State Machine
    always @(posedge clk or negedge reset_n) begin
        if (!reset_n)
            current_state <= S0;
        else
            current_state <= next_state;
    end

    // Sequence Detector
    always @(current_state or data_in) begin
        case (current_state)
            S0: if (data_in == 3'b001) next_state = S1; else next_state = S0;
            S1: if (data_in == 3'b101) next_state = S2; else next_state = S0;
            S2: if (data_in == 3'b110) next_state = S3; else next_state = S0;
            S3: if (data_in == 3'b000) next_state = S4; else next_state = S0;
            S4: if (data_in == 3'b110) next_state = S5; else next_state = S0;
            S5: if (data_in == 3'b110) next_state = S6; else next_state = S0;
            S6: if (data_in == 3'b011) next_state = S7; else next_state = S0;
            S7: if (data_in == 3'b101) next_state = S8; else next_state = S0;
            S8: next_state = S0;
            default: next_state = S0;
        endcase
    end

    // Output Register
    always @(current_state) begin
        if (current_state == S8)
            sequence_found <= 1;
        else
            sequence_found <= 0;
    end

endmodule
```
This code implements a finite state machine to detect the specified sequence. The state machine has 9 states, one for each element of the sequence and an initial state. The sequence detector checks the incoming data against the current state of the sequence. If the data matches the current state, it moves to the next state. If the data does not match, it returns to the initial state. The output register holds the 'sequence found' output. It is set to '1' when the last element of the sequence is detected and '0' otherwise.