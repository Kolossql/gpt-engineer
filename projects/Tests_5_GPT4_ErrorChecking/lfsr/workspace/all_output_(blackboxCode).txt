The core blocks necessary for the LFSR module are:

1. Shift Register: This is the main component of the LFSR. It will hold the current state of the LFSR and will be updated on every clock cycle.

2. Feedback Logic: This block will take the current state of the shift register and the tap locations as inputs and will generate the feedback bit. This feedback bit will be used to update the shift register.

3. Reset Logic: This block will handle the active-low reset signal. When the reset signal is active, it will reset the shift register to the initial state.

Now, let's write the Verilog code for the LFSR module.

lfsr.v
```verilog
module LFSR (
    input wire clk,
    input wire reset_n,
    output reg [7:0] data
);

    // Shift Register
    reg [7:0] shift_reg;

    // Feedback Logic
    wire feedback;
    assign feedback = shift_reg[7] ^ shift_reg[6] ^ shift_reg[4] ^ shift_reg[1];

    // Reset Logic and Shift Register Update
    always @(posedge clk or negedge reset_n) begin
        if (~reset_n)
            shift_reg <= 8'b10001010; // Initial state
        else
            shift_reg <= {shift_reg[6:0], feedback};
    end

    // Output Data
    assign data = shift_reg;

endmodule
```
This code defines a single module named LFSR. The shift register is updated on every positive edge of the clock or when the reset signal is active. The feedback logic uses XOR operation on the bits at the tap locations to generate the feedback bit. The output data is simply the current state of the shift register.