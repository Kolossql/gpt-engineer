The blocks necessary to properly test the sequence detector module are:
1. Testbench module: This module instantiates the sequence detector module and provides stimulus to its inputs. It also monitors the outputs of the sequence detector module and verifies their correctness.
2. Clock generator: This block generates the clock signal for the testbench module.
3. Reset generator: This block generates the active-low reset signal for the testbench module.
4. Stimulus generator: This block generates the input data sequence to be tested by the sequence detector module.
5. Monitor: This block monitors the outputs of the sequence detector module and captures them for verification.

Important edge cases to be tested in the testbench:
1. Testing the detection of the specified sequence when it occurs at the beginning of the input data.
2. Testing the detection of the specified sequence when it occurs in the middle of the input data.
3. Testing the detection of the specified sequence when it occurs at the end of the input data.
4. Testing the detection of the specified sequence when it occurs multiple times in the input data.
5. Testing the case where the input data does not match any of the specified sequences.

Now let's proceed with the content of the testbench module:

**testbench.v**
```verilog
module testbench;
  
  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns
  
  // Inputs
  reg clk;
  reg reset;
  reg [2:0] data;
  
  // Outputs
  wire sequence_found;
  
  // Instantiate sequence detector module
  sequence_detector dut (
    .clk(clk),
    .reset(reset),
    .data(data),
    .sequence_found(sequence_found)
  );
  
  // Clock generator
  always #((CLK_PERIOD)/2) clk = ~clk;
  
  // Reset generator
  initial begin
    reset = 1;
    #((CLK_PERIOD)*2) reset = 0;
  end
  
  // Stimulus generator
  initial begin
    // Test case 1: Sequence occurs at the beginning
    #((CLK_PERIOD)*2) data = 3'b001;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b011;
    #((CLK_PERIOD)*2) data = 3'b101;
    
    // Test case 2: Sequence occurs in the middle
    #((CLK_PERIOD)*2) data = 3'b111;
    #((CLK_PERIOD)*2) data = 3'b001;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b011;
    #((CLK_PERIOD)*2) data = 3'b101;
    
    // Test case 3: Sequence occurs at the end
    #((CLK_PERIOD)*2) data = 3'b111;
    #((CLK_PERIOD)*2) data = 3'b001;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b011;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b001;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b110;
    
    // Test case 4: Sequence occurs multiple times
    #((CLK_PERIOD)*2) data = 3'b001;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b011;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b001;
    #((CLK_PERIOD)*2) data = 3'b101;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b110;
    #((CLK_PERIOD)*2) data = 3'b011;
    #((CLK_PERIOD)*2) data = 3'b101;
    
    // Test case 5: No sequence match
    #((CLK_PERIOD)*2) data = 3'b111;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b111;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b111;
    #((CLK_PERIOD)*2) data = 3'b000;
    #((CLK_PERIOD)*2) data = 3'b111;
    #((CLK_PERIOD)*2) data = 3'b000;
    
    // End simulation
    $finish;
  end
  
  // Monitor
  always @(posedge clk) begin
    $display("Data: %b, Sequence Found: %b", data, sequence_found);
  end
  
endmodule
```

This testbench module tests five cases and each edge case as follows:
1. Test case 1: Sequence occurs at the beginning of the input data.
2. Test case 2: Sequence occurs in the middle of the input data.
3. Test case 3: Sequence occurs at the end of the input data.
4. Test case 4: Sequence occurs multiple times in the input data.
5. Test case 5: No sequence match.

The testbench module generates the clock signal, active-low reset signal, and input data sequence. It instantiates the sequence detector module and connects its inputs and outputs. It also monitors the outputs of the sequence detector module and displays them using the `$display` statement.

To verify the correctness of the outputs, the testbench module displays the input data and the sequence found output using the `$display` statement. The testbench can be further enhanced by using assertions or comparing the outputs with expected values.

To run the testbench and view the waveforms, a simulation tool like ModelSim or Icarus Verilog can be used. The waveforms can be viewed using a waveform viewer like GTKWave.