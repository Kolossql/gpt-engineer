The blocks necessary to properly test the module are:
1. Testbench module: This module will instantiate the sequence generator module and provide the necessary inputs (clock, active-low reset, enable) for testing. It will also monitor the data output and verify its correctness.

Important edge cases to test in the testbench:
1. Test the initial state of the module, where it should output the first element of the sequence immediately upon power-up.
2. Test the behavior of the module when the active-low reset signal is activated.
3. Test the behavior of the module when the enable signal is low.
4. Test the sequence generation by verifying the output for a few cycles.
5. Test the sequence repetition by verifying the output for multiple cycles.

Now, let's proceed with the content of the testbench module:

testbench.v
```verilog
module testbench;
  
  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns
  
  // Inputs
  reg clk;
  reg reset;
  reg enable;
  
  // Outputs
  wire [7:0] data;
  
  // Instantiate the sequence generator module
  sequence_generator dut (
    .clk(clk),
    .reset(reset),
    .enable(enable),
    .data(data)
  );
  
  // Clock generation
  always begin
    clk = 0;
    #((CLK_PERIOD)/2);
    clk = 1;
    #((CLK_PERIOD)/2);
  end
  
  // Reset generation
  initial begin
    reset = 1;
    #10;
    reset = 0;
  end
  
  // Test cases
  initial begin
    // Test initial state
    #10;
    $display("Test Case 1: Initial State");
    $display("Expected Output: 0xAF");
    $display("Actual Output: %h", data);
    
    // Test active-low reset
    #10;
    $display("Test Case 2: Active-Low Reset");
    $display("Expected Output: 0xAF");
    $display("Actual Output: %h", data);
    reset = 1;
    #10;
    reset = 0;
    #10;
    $display("Expected Output: 0xAF");
    $display("Actual Output: %h", data);
    
    // Test enable signal low
    #10;
    $display("Test Case 3: Enable Signal Low");
    $display("Expected Output: No output");
    $display("Actual Output: %h", data);
    enable = 0;
    #10;
    $display("Expected Output: No output");
    $display("Actual Output: %h", data);
    
    // Test sequence generation
    #10;
    $display("Test Case 4: Sequence Generation");
    $display("Expected Output: 0xBC");
    $display("Actual Output: %h", data);
    #10;
    $display("Expected Output: 0xE2");
    $display("Actual Output: %h", data);
    #10;
    $display("Expected Output: 0x78");
    $display("Actual Output: %h", data);
    
    // Test sequence repetition
    #10;
    $display("Test Case 5: Sequence Repetition");
    $display("Expected Output: 0xFF");
    $display("Actual Output: %h", data);
    #10;
    $display("Expected Output: 0xE2");
    $display("Actual Output: %h", data);
    #10;
    $display("Expected Output: 0x0B");
    $display("Actual Output: %h", data);
    #10;
    $display("Expected Output: 0x8D");
    $display("Actual Output: %h", data);
    #10;
    $display("Expected Output: 0xAF");
    $display("Actual Output: %h", data);
  end
  
  // Stop simulation
  initial begin
    #100;
    $finish;
  end
  
endmodule
```

This testbench module tests five cases:
1. Initial state: It verifies that the module outputs the first element of the sequence immediately upon power-up.
2. Active-Low Reset: It verifies that the module resets to the initial state when the active-low reset signal is activated.
3. Enable Signal Low: It verifies that the module does not output the sequence when the enable signal is low.
4. Sequence Generation: It verifies the correct generation of the sequence by checking the output for a few cycles.
5. Sequence Repetition: It verifies that the module repeats the sequence by checking the output for multiple cycles.

The testbench uses display statements to print the expected and actual outputs for each test case. The simulation is stopped after 100 time units using the $finish system function.

Please note that the testbench assumes a clock period of 10 ns (CLK_PERIOD) and generates a clock signal with a 50% duty cycle. Adjust the CLK_PERIOD value according to your desired clock frequency.