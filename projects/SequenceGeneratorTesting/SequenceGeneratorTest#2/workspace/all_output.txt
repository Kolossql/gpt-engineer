The core module for the sequence generator will be named "sequence_generator". It will have the following blocks:
1. Clock Divider: Divides the clock signal to generate a slower clock for sequence generation.
2. Sequence Counter: Keeps track of the current position in the sequence.
3. Output Logic: Generates the output sequence based on the current position.

Now I will provide the content of each file, starting with the entrypoint file "sequence_generator.v".

sequence_generator.v
```verilog
module sequence_generator (
  input wire clk,
  input wire reset,
  input wire enable,
  output reg [7:0] data_out
);

  // Instantiate the clock divider
  wire slow_clk;
  clock_divider clk_divider_inst (
    .clk(clk),
    .reset(reset),
    .slow_clk(slow_clk)
  );

  // Instantiate the sequence counter
  reg [2:0] counter;
  sequence_counter counter_inst (
    .clk(slow_clk),
    .reset(reset),
    .enable(enable),
    .counter(counter)
  );

  // Instantiate the output logic
  output_logic output_logic_inst (
    .counter(counter),
    .data_out(data_out)
  );

endmodule
```

Next, I will provide the content of the "clock_divider.v" file.

clock_divider.v
```verilog
module clock_divider (
  input wire clk,
  input wire reset,
  output wire slow_clk
);

  reg [15:0] count;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      count <= 0;
      slow_clk <= 0;
    end else begin
      count <= count + 1;
      if (count == 50000) begin
        count <= 0;
        slow_clk <= ~slow_clk;
      end
    end
  end

endmodule
```

Next, I will provide the content of the "sequence_counter.v" file.

sequence_counter.v
```verilog
module sequence_counter (
  input wire clk,
  input wire reset,
  input wire enable,
  output reg [2:0] counter
);

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      counter <= 0;
    end else if (enable) begin
      counter <= counter + 1;
    end
  end

endmodule
```

Finally, I will provide the content of the "output_logic.v" file.

output_logic.v
```verilog
module output_logic (
  input wire [2:0] counter,
  output reg [7:0] data_out
);

  always @* begin
    case (counter)
      3'b000: data_out <= 8'hAF;
      3'b001: data_out <= 8'hBC;
      3'b010: data_out <= 8'hE2;
      3'b011: data_out <= 8'h78;
      3'b100: data_out <= 8'hFF;
      3'b101: data_out <= 8'hE2;
      3'b110: data_out <= 8'h0B;
      3'b111: data_out <= 8'h8D;
      default: data_out <= 8'h00;
    endcase
  end

endmodule
```

This completes the implementation of the sequence generator in Verilog. All necessary modules and blocks have been defined and connected together in the "sequence_generator.v" file.