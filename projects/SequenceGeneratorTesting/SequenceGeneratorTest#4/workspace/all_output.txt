The necessary blocks for testing the sequence generator module are as follows:

1. Testbench module: This module will instantiate the sequence generator module and provide the necessary inputs (clock, reset, enable) for testing. It will also monitor the output data and verify if it matches the expected sequence.

Important edge cases to test in the testbench:

1. Test with enable signal low: Verify that the output data remains unchanged when the enable signal is low.
2. Test with active-low reset signal: Verify that the output data returns to the initial state when the reset signal is asserted.
3. Test with clock signal at different frequencies: Verify that the output data changes at the rising edge of the clock signal, regardless of the clock frequency.
4. Test with enable signal high: Verify that the output data follows the expected sequence when the enable signal is high.
5. Test with multiple clock cycles: Verify that the output data changes at each rising edge of the clock signal, generating the sequence correctly over multiple clock cycles.

Now, let's proceed with the code for the testbench module:

testbench.v
```verilog
module testbench;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Signals
  reg clk;
  reg reset;
  reg enable;
  wire [7:0] data;

  // Instantiate the sequence generator module
  sequence_generator dut (
    .clk(clk),
    .reset(reset),
    .enable(enable),
    .data(data)
  );

  // Clock generation
  always begin
    clk = 0;
    #((CLK_PERIOD)/2);
    clk = 1;
    #((CLK_PERIOD)/2);
  end

  // Testbench stimulus
  initial begin
    // Initialize signals
    reset = 1;
    enable = 0;

    // Wait for a few clock cycles
    #((CLK_PERIOD)*10);

    // Release reset
    reset = 0;

    // Test case 1: Enable signal low
    enable = 0;
    #((CLK_PERIOD)*10); // Wait for a few clock cycles
    // Verify output data remains unchanged
    // TODO: Add assertion here

    // Test case 2: Active-low reset signal
    reset = 1;
    #((CLK_PERIOD)*10); // Wait for a few clock cycles
    reset = 0;
    #((CLK_PERIOD)*10); // Wait for a few clock cycles
    // Verify output data returns to initial state
    // TODO: Add assertion here

    // Test case 3: Clock signal at different frequencies
    enable = 1;
    // TODO: Generate clock signal with different frequencies
    // Verify output data changes at the rising edge of the clock signal
    // TODO: Add assertion here

    // Test case 4: Enable signal high
    enable = 1;
    #((CLK_PERIOD)*10); // Wait for a few clock cycles
    // Verify output data follows the expected sequence
    // TODO: Add assertion here

    // Test case 5: Multiple clock cycles
    enable = 1;
    #((CLK_PERIOD)*100); // Wait for multiple clock cycles
    // Verify output data generates the sequence correctly over multiple clock cycles
    // TODO: Add assertion here

    // End simulation
    $finish;
  end

endmodule
```

Please note that the assertions in the testbench module are marked with "TODO" comments. You will need to add appropriate assertions to verify the output data against the expected sequence for each test case.