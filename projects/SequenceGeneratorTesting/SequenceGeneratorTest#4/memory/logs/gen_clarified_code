[{"role": "system", "content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core modules, blocks that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nYou almost always put different classes in different files.\nFor Verilog, you always create a complete testbench for each modules. \nYou try to add comments explaining very complex bits of logic.\nYou always follow the best practices for the requested languages in terms of describing the code written as a defined\npackage/project."}, {"role": "user", "content": "I am trying to create a Verilog module for a sequence generator. It must meet the following specifications:\nInitial state: outputting the first element of the sequence.\nInputs: \nClock: When the clock has a rising edge the sequence generator should output the next part of the sequence.\nActive-low reset: The active-low reset should set the module to the initial state.\nEnable: The sequence should only be outputted if enable is high.\nOutputs: Data (8 bits)\nWhile enabled, it should generate an output sequence of the following hexadecimal values in the following order and then repeat:\n        - 0xAF\n        - 0xBC\n        - 0xE2\n        - 0x78\n        - 0xFF\n        - 0xE2\n        - 0x0B\n        - 0x8D\n\n"}, {"role": "assistant", "content": "Areas that need clarification:\n1. What is the initial state of the sequence generator?\n2. How should the clock signal be connected to the module?\n3. How should the active-low reset signal be connected to the module?\n4. How should the enable signal be connected to the module?\n5. Should the sequence generator output the data continuously or only when the clock has a rising edge?\n6. Should the sequence generator output the data in hexadecimal format or binary format?\n7. Should the sequence generator repeat the sequence indefinitely or stop after outputting all the values once?"}, {"role": "user", "content": "The initial state is outputting the first element of the sequence. Output in hexadecimal format. Repeat the sequence when done.\n\nIs anything else unclear? If yes, only answer in the form:\n{remaining unclear areas} remaining questions.\n{Next question}\nIf everything is sufficiently clear, only answer \"Nothing more to clarify.\"."}, {"role": "assistant", "content": "Nothing more to clarify."}, {"role": "user", "content": "Please now remember the steps:\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nFirst lay out the names of the core modules, blocks that will be necessary, As well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nPlease note that the code should be fully functional. No placeholders.\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nFollow a language and framework appropriate best practice file naming convention.\nThe code should be fully functional. Make sure that code in different files are compatible with each other.\nBefore you finish, double check that all parts of the architecture is present in the files.\nFor Verilog, do not write a testbench.\n"}, {"role": "assistant", "content": "The core module for the sequence generator will be named \"sequence_generator\". It will have the following blocks:\n\n1. State Register: This block will store the current state of the sequence generator.\n2. Output Logic: This block will determine the output value based on the current state.\n3. Next State Logic: This block will calculate the next state based on the current state and the clock signal.\n4. Reset Logic: This block will handle the active-low reset signal to set the module to the initial state.\n5. Enable Logic: This block will control whether the sequence should be outputted based on the enable signal.\n\nNow I will provide the content of each file, starting with the entrypoint file \"sequence_generator.v\".\n\nsequence_generator.v\n```verilog\nmodule sequence_generator (\n  input wire clk,\n  input wire reset,\n  input wire enable,\n  output reg [7:0] data\n);\n\n  // State Register\n  reg [2:0] state;\n\n  // Output Logic\n  always @ (state)\n    case (state)\n      3'b000: data <= 8'hAF;\n      3'b001: data <= 8'hBC;\n      3'b010: data <= 8'hE2;\n      3'b011: data <= 8'h78;\n      3'b100: data <= 8'hFF;\n      3'b101: data <= 8'hE2;\n      3'b110: data <= 8'h0B;\n      3'b111: data <= 8'h8D;\n    endcase\n\n  // Next State Logic\n  always @ (posedge clk or posedge reset)\n    if (reset)\n      state <= 3'b000;\n    else if (enable)\n      state <= state + 1;\n\n  // Reset Logic\n  always @ (negedge reset)\n    if (!reset)\n      state <= 3'b000;\n\n  // Enable Logic\n  always @ (posedge clk)\n    if (!enable)\n      state <= 3'b000;\n\nendmodule\n```\n\nThis completes the implementation of the sequence generator module."}]