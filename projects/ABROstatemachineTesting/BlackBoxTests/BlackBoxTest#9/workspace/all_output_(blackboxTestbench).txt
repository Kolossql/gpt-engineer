The necessary blocks for testing the ABROStateMachine module are:
1. Testbench module: This module will instantiate the ABROStateMachine module and provide stimulus to its inputs. It will also monitor the outputs and verify their correctness.
2. Clock generator: This block will generate a clock signal to drive the clk input of the ABROStateMachine module.
3. Stimulus generator: This block will generate stimulus for the reset, A, and B inputs of the ABROStateMachine module.
4. Monitor: This block will monitor the outputs of the ABROStateMachine module and compare them with the expected values.

Important edge cases to test in the testbench:
1. Initial state: Test the behavior of the module when all inputs are low initially.
2. Single input high: Test the behavior of the module when only one of the inputs (A or B) is high.
3. Both inputs high in any order: Test the behavior of the module when both inputs (A and B) are high in any order.
4. Both inputs high simultaneously: Test the behavior of the module when both inputs (A and B) are high simultaneously.
5. Reset behavior: Test the behavior of the module when the reset input is activated.

Now, I will provide the content of the testbench module:

ABROStateMachine_tb.v
```verilog
module ABROStateMachine_tb;

  // Inputs
  reg clk;
  reg reset;
  reg A;
  reg B;

  // Outputs
  wire O;
  wire [1:0] State;

  // Instantiate the ABROStateMachine module
  ABROStateMachine dut (
    .clk(clk),
    .reset(reset),
    .A(A),
    .B(B),
    .O(O),
    .State(State)
  );

  // Clock generator
  always #5 clk = ~clk;

  // Stimulus generator
  initial begin
    // Initialize inputs
    reset = 1'b0;
    A = 1'b0;
    B = 1'b0;

    // Test case 1: Initial state
    #10;
    if (O == 1'b0 && State == 2'b00)
      $display("Test case 1 Passed");
    else
      $display("Test case 1 Failed");

    // Test case 2: Single input high
    A = 1'b1;
    #10;
    if (O == 1'b0 && State == 2'b00)
      $display("Test case 2 Passed");
    else
      $display("Test case 2 Failed");

    // Test case 3: Both inputs high in any order
    A = 1'b0;
    B = 1'b1;
    #10;
    if (O == 1'b1 && State == 2'b11)
      $display("Test case 3 Passed");
    else
      $display("Test case 3 Failed");

    // Test case 4: Both inputs high simultaneously
    A = 1'b1;
    #10;
    if (O == 1'b1 && State == 2'b11)
      $display("Test case 4 Passed");
    else
      $display("Test case 4 Failed");

    // Test case 5: Reset behavior
    reset = 1'b1;
    #10;
    if (O == 1'b0 && State == 2'b00)
      $display("Test case 5 Passed");
    else
      $display("Test case 5 Failed");

    // End simulation
    $finish;
  end

  // Monitor
  always @(posedge clk) begin
    $display("O = %b, State = %b", O, State);
  end

  // Dump waveform
  initial begin
    $dumpfile("WaveOutput.vcd");
    $dumpvars(0, ABROStateMachine_tb);
  end

endmodule
```

Please note that the testbench assumes a clock period of 10 time units and uses a simple assertion mechanism to verify the correctness of the outputs. The testbench also includes display statements to indicate whether each test case has passed or failed. The waveform is dumped to a VCD file named "WaveOutput.vcd" for further analysis using a waveform viewer like GTKWave.