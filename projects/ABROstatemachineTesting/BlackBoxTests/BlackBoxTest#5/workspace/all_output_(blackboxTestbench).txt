Blocks necessary for testing the ABROStateMachine module:
1. Testbench module: This module will instantiate the ABROStateMachine module and provide stimulus to its inputs. It will also verify the correctness of the outputs.
2. Clock generator: This block will generate the clock signal for the testbench module.
3. Reset generator: This block will generate the active-low reset signal for the testbench module.
4. Stimulus generator: This block will generate the stimulus for the inputs A and B of the ABROStateMachine module.
5. Output checker: This block will check the correctness of the outputs O and state from the ABROStateMachine module.

Important edge cases to test in the testbench:
1. Initial state: Test when both A and B are low initially, and then transition to the state where both A and B are high.
2. Random state: Test with random input combinations of A and B to cover different state transitions.
3. Reset: Test the behavior of the module when the reset signal is asserted.
4. Multiple transitions: Test multiple state transitions to ensure the module behaves correctly in different scenarios.
5. Output verification: Verify the correctness of the output O and state by comparing them with expected values.

Testbench module code:

testbench.v
```verilog
module testbench;
  // Inputs
  reg clk;
  reg reset;
  reg A;
  reg B;

  // Outputs
  wire O;
  wire [1:0] state;

  // Instantiate ABROStateMachine module
  ABROStateMachine dut (
    .clk(clk),
    .reset(reset),
    .A(A),
    .B(B),
    .O(O),
    .state(state)
  );

  // Clock generator
  always #5 clk = ~clk;

  // Reset generator
  initial begin
    reset = 1;
    #10 reset = 0;
  end

  // Stimulus generator
  initial begin
    // Test 1: Initial state
    A = 0;
    B = 0;
    #20 A = 1;
    #20 B = 1;
    #20 A = 0;
    #20 B = 0;

    // Test 2: Random state
    // Add more random stimulus here

    // Test 3: Reset
    #20 reset = 1;
    #10 reset = 0;

    // Test 4: Multiple transitions
    // Add more stimulus for multiple transitions here

    // Test 5: Output verification
    // Add stimulus to verify the output here

    // End simulation
    #10 $finish;
  end

  // Output checker
  always @(posedge clk) begin
    // Test 1: Initial state
    if (O === 1'b1 && state === 2'b00)
      $display("Test 1 Passed");
    else
      $display("Test 1 Failed");

    // Test 2: Random state
    // Add output verification for random state here

    // Test 3: Reset
    // Add output verification for reset here

    // Test 4: Multiple transitions
    // Add output verification for multiple transitions here

    // Test 5: Output verification
    // Add output verification for output here
  end

  // Dump waveform for GTKWave
  initial begin
    $dumpfile("WaveOutput.vcd");
    $dumpvars(0, testbench);
  end
endmodule
```

Note: The code provided is a template and may require modifications based on the specific implementation of the ABROStateMachine module and the desired test cases.