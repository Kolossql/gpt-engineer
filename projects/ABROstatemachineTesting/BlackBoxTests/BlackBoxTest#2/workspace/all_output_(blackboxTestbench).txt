Blocks necessary for testing the ABROStateMachine module:
1. Testbench module: This module will instantiate the ABROStateMachine module and provide stimulus to its inputs. It will also verify the correctness of the outputs.
2. Clock generator: This block will generate the clock signal for the testbench module.
3. Reset generator: This block will generate the active-low reset signal for the testbench module.
4. Stimulus generator: This block will generate the stimulus for the A and B inputs of the testbench module.
5. Output checker: This block will check the correctness of the O output from the ABROStateMachine module.

Important edge cases to test in the testbench:
1. Initial state: Test the module when both A and B inputs are low initially.
2. Single high input: Test the module when only one of the A or B inputs is high.
3. Both inputs high in any order: Test the module when both A and B inputs are high in any order.
4. Continuous high inputs: Test the module when both A and B inputs are continuously high.
5. Reset: Test the module when the reset signal is asserted.

Testbench module code:

testbench.v
```verilog
module testbench;

  // Inputs
  reg clk;
  reg reset;
  reg A;
  reg B;

  // Outputs
  wire O;
  wire [3:0] state;

  // Instantiate ABROStateMachine module
  ABROStateMachine dut (
    .clk(clk),
    .reset(reset),
    .A(A),
    .B(B),
    .O(O),
    .state(state)
  );

  // Clock generator
  always #5 clk = ~clk;

  // Reset generator
  initial begin
    reset = 1;
    #10 reset = 0;
  end

  // Stimulus generator
  initial begin
    // Test case 1: Initial state
    A = 0;
    B = 0;
    #20;
    if (O == 0 && state == 0)
      $display("Test case 1 Passed");
    else
      $display("Test case 1 Failed");

    // Test case 2: Single high input
    A = 1;
    B = 0;
    #20;
    if (O == 0 && state == 0)
      $display("Test case 2 Passed");
    else
      $display("Test case 2 Failed");

    // Test case 3: Both inputs high in any order
    A = 1;
    B = 1;
    #20;
    if (O == 1 && state == 1)
      $display("Test case 3 Passed");
    else
      $display("Test case 3 Failed");

    // Test case 4: Continuous high inputs
    A = 1;
    B = 1;
    #20;
    if (O == 1 && state == 1)
      $display("Test case 4 Passed");
    else
      $display("Test case 4 Failed");

    // Test case 5: Reset
    A = 1;
    B = 1;
    reset = 1;
    #10 reset = 0;
    #20;
    if (O == 0 && state == 0)
      $display("Test case 5 Passed");
    else
      $display("Test case 5 Failed");

    // End simulation
    $finish;
  end

  // Dump waveform
  initial begin
    $dumpfile("WaveOutput.vcd");
    $dumpvars(0, testbench);
  end

endmodule
```

Note: The code assumes that the ABROStateMachine module has been defined and is available for instantiation.