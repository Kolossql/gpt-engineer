The blocks necessary to properly test the ABRO module are:
1. Testbench module: This module will instantiate the ABRO module and provide stimulus to its inputs. It will also monitor the outputs and verify their correctness.
2. Clock generator: This block will generate a clock signal to drive the ABRO module.
3. Reset generator: This block will generate an active-low reset signal to reset the ABRO module.
4. Stimulus generator: This block will generate stimulus for the A and B inputs of the ABRO module.
5. Monitor: This block will monitor the outputs of the ABRO module and check if they are correct.

Important edge cases to test in the testbench:
1. Testing the initial state where A and B are not entered.
2. Testing the case where A is entered before B.
3. Testing the case where B is entered before A.
4. Testing the case where A and B are entered in the correct order.
5. Testing the case where A and B are entered in the incorrect order.

Now let's proceed with the testbench module:

**testbench.v**
```verilog
module testbench;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Signals
  reg clk;
  reg reset;
  reg A;
  reg B;
  wire O;
  wire [1:0] State;
  wire [3:0] CurrentState;

  // Instantiate ABRO module
  ABRO abro (
    .clk(clk),
    .reset(reset),
    .A(A),
    .B(B),
    .O(O),
    .State(State)
  );

  // Clock generator
  always #((CLK_PERIOD)/2) clk = ~clk;

  // Reset generator
  initial begin
    reset = 1;
    #((CLK_PERIOD)*2) reset = 0;
  end

  // Stimulus generator
  initial begin
    // Test case 1: Initial state
    A = 0;
    B = 0;
    #((CLK_PERIOD)*10);
    
    // Test case 2: A before B
    A = 1;
    B = 0;
    #((CLK_PERIOD)*10);
    
    // Test case 3: B before A
    A = 0;
    B = 1;
    #((CLK_PERIOD)*10);
    
    // Test case 4: A and B in correct order
    A = 1;
    B = 1;
    #((CLK_PERIOD)*10);
    
    // Test case 5: A and B in incorrect order
    A = 1;
    B = 0;
    #((CLK_PERIOD)*10);
    
    $finish;
  end

  // Monitor
  always @(posedge clk) begin
    $display("O = %b, State = %b, CurrentState = %b", O, State, CurrentState);
  end

endmodule
```

This testbench module tests five cases:
1. Initial state where A and B are not entered.
2. A is entered before B.
3. B is entered before A.
4. A and B are entered in the correct order.
5. A and B are entered in the incorrect order.

The testbench generates a clock signal, a reset signal, and stimulus for the A and B inputs. It monitors the outputs and displays them for verification.