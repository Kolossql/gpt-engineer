The blocks necessary to properly test the binary to BCD converter module are:
1. Binary to BCD Converter Module: This is the module that needs to be tested. It takes a 5-bit binary input and converts it to an 8-bit BCD output.
2. Testbench Module: This module is responsible for generating the test inputs, applying them to the binary to BCD converter module, and verifying the correctness of the output.

Important edge cases to be tested in the testbench:
1. Minimum input value (0 in binary)
2. Maximum input value (31 in binary)
3. Input value with all bits set to 1 (31 in binary)
4. Input value with all bits set to 0 (0 in binary)
5. Random input value

Now, let's proceed with the content of the testbench module:

**testbench.v**
```verilog
module testbench;
  
  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns
  
  // Signals
  reg [4:0] binary_input;
  wire [7:0] bcd_output;
  
  // Instantiate the binary to BCD converter module
  binary_to_bcd_converter dut (
    .binary_input(binary_input),
    .bcd_output(bcd_output)
  );
  
  // Clock generation
  reg clk;
  always #((CLK_PERIOD)/2) clk = ~clk;
  
  // Test input values
  initial begin
    // Test case 1: Minimum input value (0 in binary)
    binary_input = 5'b00000;
    #10;
    $display("Binary Input: %b, BCD Output: %b", binary_input, bcd_output);
    
    // Test case 2: Maximum input value (31 in binary)
    binary_input = 5'b11111;
    #10;
    $display("Binary Input: %b, BCD Output: %b", binary_input, bcd_output);
    
    // Test case 3: Input value with all bits set to 1 (31 in binary)
    binary_input = 5'b11111;
    #10;
    $display("Binary Input: %b, BCD Output: %b", binary_input, bcd_output);
    
    // Test case 4: Input value with all bits set to 0 (0 in binary)
    binary_input = 5'b00000;
    #10;
    $display("Binary Input: %b, BCD Output: %b", binary_input, bcd_output);
    
    // Test case 5: Random input value
    binary_input = $random;
    #10;
    $display("Binary Input: %b, BCD Output: %b", binary_input, bcd_output);
    
    // End simulation
    $finish;
  end
  
  // Clock driver
  always #((CLK_PERIOD)/2) clk = ~clk;
  
endmodule
```

This testbench module generates different test input values for the binary to BCD converter module and verifies the correctness of the output using display statements. The testbench also includes a clock driver to generate a clock signal for the DUT (Design Under Test).

Please note that the testbench assumes a clock period of 10 ns. You can adjust the `CLK_PERIOD` parameter according to your requirements.