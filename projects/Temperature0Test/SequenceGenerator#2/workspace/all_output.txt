The blocks necessary to properly test the sequence generator module are:
1. Testbench module: This module instantiates the sequence generator module and provides the necessary inputs (clock, reset, enable) and captures the outputs (data). It also includes the test cases and verifies the correctness of the output sequence.
2. Clock generator: This module generates the clock signal for the testbench module.
3. Reset generator: This module generates the active-low reset signal for the testbench module.
4. Enable generator: This module generates the enable signal for the testbench module.

Important edge cases to test in the testbench:
1. Testing the initial state: Verify that the sequence generator outputs the first element of the sequence (0xAF) when the module is reset.
2. Testing clock edge triggering: Verify that the sequence generator outputs the next element of the sequence when the clock has a rising edge.
3. Testing active-low reset: Verify that the sequence generator resets to the initial state when the active-low reset signal is asserted.
4. Testing enable signal: Verify that the sequence generator stops generating and outputting the sequence when the enable signal is low.
5. Testing continuous generation: Verify that the sequence generator continuously generates and outputs the sequence without stopping.

Now, let's proceed with the content of the testbench module:

**sequence_generator_tb.v**
```verilog
module sequence_generator_tb;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Inputs
  reg clk;
  reg reset;
  reg enable;

  // Outputs
  wire [7:0] data;

  // Instantiate sequence generator module
  sequence_generator dut (
    .clk(clk),
    .reset(reset),
    .enable(enable),
    .data(data)
  );

  // Clock generator
  always #((CLK_PERIOD)/2) clk = ~clk;

  // Reset generator
  initial begin
    reset = 1;
    #((CLK_PERIOD)*2) reset = 0;
  end

  // Enable generator
  initial begin
    enable = 1;
    #((CLK_PERIOD)*10) enable = 0;
    #((CLK_PERIOD)*10) enable = 1;
  end

  // Test cases
  initial begin
    // Test case 1: Initial state
    $display("Test case 1: Initial state");
    #((CLK_PERIOD)*2) $display("Data: %h", data);

    // Test case 2: Clock edge triggering
    $display("Test case 2: Clock edge triggering");
    #((CLK_PERIOD)*2) $display("Data: %h", data);
    #((CLK_PERIOD)*2) $display("Data: %h", data);

    // Test case 3: Active-low reset
    $display("Test case 3: Active-low reset");
    reset = 1;
    #((CLK_PERIOD)*2) reset = 0;
    #((CLK_PERIOD)*2) $display("Data: %h", data);

    // Test case 4: Enable signal
    $display("Test case 4: Enable signal");
    enable = 0;
    #((CLK_PERIOD)*2) $display("Data: %h", data);
    #((CLK_PERIOD)*10) enable = 1;
    #((CLK_PERIOD)*2) $display("Data: %h", data);

    // Test case 5: Continuous generation
    $display("Test case 5: Continuous generation");
    #((CLK_PERIOD)*20) $display("Data: %h", data);
    #((CLK_PERIOD)*20) $display("Data: %h", data);
    #((CLK_PERIOD)*20) $display("Data: %h", data);
    #((CLK_PERIOD)*20) $display("Data: %h", data);
    #((CLK_PERIOD)*20) $display("Data: %h", data);
  end

endmodule
```

This testbench module tests five cases:
1. Initial state: Verifies that the sequence generator outputs the first element of the sequence (0xAF) when the module is reset.
2. Clock edge triggering: Verifies that the sequence generator outputs the next element of the sequence when the clock has a rising edge.
3. Active-low reset: Verifies that the sequence generator resets to the initial state when the active-low reset signal is asserted.
4. Enable signal: Verifies that the sequence generator stops generating and outputting the sequence when the enable signal is low.
5. Continuous generation: Verifies that the sequence generator continuously generates and outputs the sequence without stopping.

The testbench module includes display statements to print the output sequence at different points in time. The output sequence can be further verified using waveform viewer tools like GTKWave.