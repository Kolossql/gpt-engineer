The blocks necessary to properly test the ABRO module are:
1. Testbench module: This module will instantiate the ABRO module and provide stimulus to its inputs. It will also monitor the outputs and verify their correctness.
2. Clock generator: This block will generate the clock signal for the testbench module.
3. Reset generator: This block will generate the active-low reset signal for the testbench module.
4. Stimulus generator: This block will generate the input signals A and B for the testbench module.
5. Output monitor: This block will monitor the output signals O and CurrentState of the ABRO module and display their values during simulation.

Important edge cases to test in the testbench:
1. Test the initial state where both A and B are not entered.
2. Test the case where A is entered before B.
3. Test the case where B is entered before A.
4. Test the case where both A and B are entered simultaneously.
5. Test the case where the active-low reset signal is triggered.

Now, let's proceed with the content of the testbench module:

**testbench.v**
```verilog
module testbench;
  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Signals
  reg clk;
  reg reset;
  reg A;
  reg B;
  wire O;
  wire [1:0] CurrentState;

  // Instantiate ABRO module
  ABRO abro (
    .clk(clk),
    .reset(reset),
    .A(A),
    .B(B),
    .O(O),
    .State(CurrentState)
  );

  // Clock generator
  always #((CLK_PERIOD)/2) clk = ~clk;

  // Reset generator
  initial begin
    reset = 1;
    #((CLK_PERIOD)*2) reset = 0;
  end

  // Stimulus generator
  initial begin
    // Test case 1: Initial state
    A = 0;
    B = 0;
    #((CLK_PERIOD)*5);
    $display("Test case 1: Initial state");
    $display("A = %b, B = %b, O = %b, CurrentState = %b", A, B, O, CurrentState);
    $display("");

    // Test case 2: A entered before B
    A = 1;
    B = 0;
    #((CLK_PERIOD)*5);
    $display("Test case 2: A entered before B");
    $display("A = %b, B = %b, O = %b, CurrentState = %b", A, B, O, CurrentState);
    $display("");

    // Test case 3: B entered before A
    A = 0;
    B = 1;
    #((CLK_PERIOD)*5);
    $display("Test case 3: B entered before A");
    $display("A = %b, B = %b, O = %b, CurrentState = %b", A, B, O, CurrentState);
    $display("");

    // Test case 4: A and B entered simultaneously
    A = 1;
    B = 1;
    #((CLK_PERIOD)*5);
    $display("Test case 4: A and B entered simultaneously");
    $display("A = %b, B = %b, O = %b, CurrentState = %b", A, B, O, CurrentState);
    $display("");

    // Test case 5: Active-low reset triggered
    reset = 1;
    #((CLK_PERIOD)*5);
    $display("Test case 5: Active-low reset triggered");
    $display("A = %b, B = %b, O = %b, CurrentState = %b", A, B, O, CurrentState);
    $display("");

    $finish;
  end

  // Output monitor
  always @(posedge clk) begin
    $display("A = %b, B = %b, O = %b, CurrentState = %b", A, B, O, CurrentState);
  end
endmodule
```

This testbench module tests five cases:
1. Initial state where both A and B are not entered.
2. A entered before B.
3. B entered before A.
4. A and B entered simultaneously.
5. Active-low reset triggered.

The output values are displayed using the `$display` statement, and the simulation can be observed using a waveform viewer like GTKWave.