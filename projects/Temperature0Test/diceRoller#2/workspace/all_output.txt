The blocks necessary to properly test the module are:
1. Testbench module: This module will instantiate the module under test and provide stimulus to its inputs. It will also monitor the outputs and verify their correctness.
2. Clock generator: This block will generate the clock signal for the testbench module.
3. Reset generator: This block will generate the active-low reset signal for the testbench module.
4. Stimulus generator: This block will generate the stimulus for the inputs of the testbench module, including the die select and roll signals.
5. Monitor: This block will monitor the outputs of the testbench module and capture them for verification.

Important edge cases to test in the testbench:
1. Testing the initial state of the roll with a 4-sided die.
2. Testing the roll with a 6-sided die.
3. Testing the roll with an 8-sided die.
4. Testing the roll with a 20-sided die.
5. Testing the active-low reset functionality.

Now let's proceed with the content of the testbench module:

**testbench.v**
```verilog
module testbench;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Signals
  reg clk;
  reg reset;
  reg [1:0] die_select;
  reg roll;
  wire [7:0] rolled_number;

  // Instantiate the module under test
  dice_roller dut (
    .clk(clk),
    .reset(reset),
    .die_select(die_select),
    .roll(roll),
    .rolled_number(rolled_number)
  );

  // Clock generator
  always #((CLK_PERIOD)/2) clk = ~clk;

  // Reset generator
  initial begin
    reset = 1;
    #((CLK_PERIOD)*2) reset = 0;
  end

  // Stimulus generator
  initial begin
    // Test case 1: Initial state with a 4-sided die
    die_select = 2'b00;
    roll = 0;
    #((CLK_PERIOD)*10);
    roll = 1;
    #((CLK_PERIOD)*10);
    roll = 0;
    #((CLK_PERIOD)*10);
    $display("Test case 1: Initial state with a 4-sided die");
    $display("Rolled number: %d", rolled_number);
    $display("");

    // Test case 2: Roll with a 6-sided die
    die_select = 2'b01;
    roll = 0;
    #((CLK_PERIOD)*10);
    roll = 1;
    #((CLK_PERIOD)*10);
    roll = 0;
    #((CLK_PERIOD)*10);
    $display("Test case 2: Roll with a 6-sided die");
    $display("Rolled number: %d", rolled_number);
    $display("");

    // Test case 3: Roll with an 8-sided die
    die_select = 2'b10;
    roll = 0;
    #((CLK_PERIOD)*10);
    roll = 1;
    #((CLK_PERIOD)*10);
    roll = 0;
    #((CLK_PERIOD)*10);
    $display("Test case 3: Roll with an 8-sided die");
    $display("Rolled number: %d", rolled_number);
    $display("");

    // Test case 4: Roll with a 20-sided die
    die_select = 2'b11;
    roll = 0;
    #((CLK_PERIOD)*10);
    roll = 1;
    #((CLK_PERIOD)*10);
    roll = 0;
    #((CLK_PERIOD)*10);
    $display("Test case 4: Roll with a 20-sided die");
    $display("Rolled number: %d", rolled_number);
    $display("");

    // Test case 5: Active-low reset
    die_select = 2'b01;
    roll = 0;
    #((CLK_PERIOD)*10);
    roll = 1;
    #((CLK_PERIOD)*10);
    reset = 1;
    #((CLK_PERIOD)*2);
    reset = 0;
    #((CLK_PERIOD)*10);
    roll = 0;
    #((CLK_PERIOD)*10);
    $display("Test case 5: Active-low reset");
    $display("Rolled number: %d", rolled_number);
    $display("");

    $finish;
  end

endmodule
```

This testbench module tests five cases:
1. Initial state with a 4-sided die.
2. Roll with a 6-sided die.
3. Roll with an 8-sided die.
4. Roll with a 20-sided die.
5. Active-low reset.

The testbench generates the clock signal, active-low reset signal, and stimulus for the die select and roll signals. It monitors the rolled number output and displays the results using the `$display` statement. The testbench includes appropriate delays between stimulus changes and displays the rolled number after each roll. The testbench finishes execution after all test cases are completed.