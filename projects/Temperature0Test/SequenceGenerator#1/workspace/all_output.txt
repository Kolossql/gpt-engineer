The blocks necessary to properly test the sequence generator module are:
1. Testbench module: This module instantiates the sequence generator module and provides the necessary inputs (clock, active-low reset, enable) to test its functionality. It also captures and verifies the output sequence.
2. Clock generator: This block generates the clock signal with a specified frequency and duty cycle to drive the sequence generator module.
3. Stimulus generator: This block generates the necessary input stimuli (active-low reset, enable) to test different scenarios of the sequence generator module.
4. Output checker: This block checks the output sequence generated by the sequence generator module and verifies if it matches the expected sequence.

Important edge cases to test in the testbench:
1. Testing the initial state: Verify that the sequence generator module outputs the first element of the sequence (0xAF) when it is initially powered on or reset.
2. Testing clock edge triggering: Verify that the sequence generator module outputs the next part of the sequence when the clock signal has a rising edge.
3. Testing active-low reset: Verify that the sequence generator module resets to the initial state (0xAF) when the active-low reset signal is activated.
4. Testing enable signal: Verify that the sequence generator module generates and outputs the sequence only when the enable signal is high. When the enable signal is low, the module should stop outputting the sequence.
5. Testing sequence repetition: Verify that the sequence generator module repeats the sequence indefinitely when the enable signal is continuously high.

Now, let's proceed with the content of the testbench module:

**sequence_generator_tb.v**
```verilog
module sequence_generator_tb;

  // Parameters
  parameter CLK_PERIOD = 10; // Clock period in ns

  // Inputs
  reg clk;
  reg reset;
  reg enable;

  // Outputs
  wire [7:0] data;

  // Instantiate the sequence generator module
  sequence_generator dut (
    .clk(clk),
    .reset(reset),
    .enable(enable),
    .data(data)
  );

  // Clock generator
  always #((CLK_PERIOD)/2) clk = ~clk;

  // Stimulus generator
  initial begin
    reset = 1; // Activate active-low reset
    enable = 0; // Set enable signal low

    // Test case 1: Initial state
    #10;
    $display("Test Case 1: Initial state");
    $display("Expected Output: 0xAF");
    $display("Actual Output: %h", data);
    if (data === 8'hAF)
      $display("Test Case 1 Passed");
    else
      $display("Test Case 1 Failed");

    // Test case 2: Clock edge triggering
    #10;
    $display("Test Case 2: Clock edge triggering");
    $display("Expected Output: 0xBC");
    $display("Actual Output: %h", data);
    if (data === 8'hBC)
      $display("Test Case 2 Passed");
    else
      $display("Test Case 2 Failed");

    // Test case 3: Active-low reset
    #10;
    reset = 0; // Deactivate active-low reset
    $display("Test Case 3: Active-low reset");
    $display("Expected Output: 0xAF");
    $display("Actual Output: %h", data);
    if (data === 8'hAF)
      $display("Test Case 3 Passed");
    else
      $display("Test Case 3 Failed");

    // Test case 4: Enable signal
    #10;
    enable = 1; // Set enable signal high
    $display("Test Case 4: Enable signal");
    $display("Expected Output: 0xE2");
    $display("Actual Output: %h", data);
    if (data === 8'hE2)
      $display("Test Case 4 Passed");
    else
      $display("Test Case 4 Failed");

    // Test case 5: Sequence repetition
    #10;
    $display("Test Case 5: Sequence repetition");
    $display("Expected Output: 0xAF");
    $display("Actual Output: %h", data);
    if (data === 8'hAF)
      $display("Test Case 5 Passed");
    else
      $display("Test Case 5 Failed");

    // End simulation
    #10;
    $finish;
  end

endmodule
```

This testbench module tests five cases:
1. Initial state: Verifies that the sequence generator module outputs the first element of the sequence (0xAF) when it is initially powered on or reset.
2. Clock edge triggering: Verifies that the sequence generator module outputs the next part of the sequence when the clock signal has a rising edge.
3. Active-low reset: Verifies that the sequence generator module resets to the initial state (0xAF) when the active-low reset signal is activated.
4. Enable signal: Verifies that the sequence generator module generates and outputs the sequence only when the enable signal is high. When the enable signal is low, the module should stop outputting the sequence.
5. Sequence repetition: Verifies that the sequence generator module repeats the sequence indefinitely when the enable signal is continuously high.

The testbench uses display statements to print the expected and actual outputs for each test case. It compares the actual output with the expected output and displays whether the test case passed or failed. The testbench also uses a clock generator to generate the clock signal with a specified period.