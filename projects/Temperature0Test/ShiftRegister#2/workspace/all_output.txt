The necessary blocks for testing the shift register module are as follows:

1. Testbench module: This module will instantiate the shift register module and provide the necessary inputs for testing. It will also monitor the outputs and verify their correctness.

Important edge cases to test in the testbench:

1. Initial state: Verify that the shift register starts with the correct initial state of 00000000.
2. Shift enable low: Verify that the shift register holds the current data without shifting when the shift enable signal is low.
3. Shift enable high: Verify that the shift register shifts the data bit on the rising edge of the clock when the shift enable signal is high.
4. Active-low reset: Verify that the shift register resets to the initial state when the active-low reset signal is asserted.
5. Data change: Verify that the shift register outputs the stored data when it is changed.

Now, let's proceed with the code implementation.

**shift_register_tb.v**

```verilog
module shift_register_tb;

  // Parameters
  parameter DATA_WIDTH = 8;

  // Inputs
  reg clk;
  reg reset;
  reg shift_enable;
  reg data_in;

  // Outputs
  wire [DATA_WIDTH-1:0] data_out;

  // Instantiate the shift register module
  shift_register dut (
    .clk(clk),
    .reset(reset),
    .shift_enable(shift_enable),
    .data_in(data_in),
    .data_out(data_out)
  );

  // Clock generation
  always begin
    clk = 0;
    #5;
    clk = 1;
    #5;
  end

  // Testbench logic
  initial begin
    // Initialize inputs
    reset = 1;
    shift_enable = 0;
    data_in = 0;

    // Wait for a few clock cycles
    #20;

    // Release reset
    reset = 0;

    // Test case 1: Initial state
    $display("Test Case 1: Initial state");
    #10;
    if (data_out !== 8'b00000000)
      $display("ERROR: Incorrect initial state");

    // Test case 2: Shift enable low
    $display("Test Case 2: Shift enable low");
    shift_enable = 0;
    data_in = 1;
    #10;
    if (data_out !== 8'b00000000)
      $display("ERROR: Incorrect output when shift enable is low");

    // Test case 3: Shift enable high
    $display("Test Case 3: Shift enable high");
    shift_enable = 1;
    data_in = 1;
    #10;
    if (data_out !== 8'b00000001)
      $display("ERROR: Incorrect output when shift enable is high");

    // Test case 4: Active-low reset
    $display("Test Case 4: Active-low reset");
    reset = 1;
    #10;
    if (data_out !== 8'b00000000)
      $display("ERROR: Incorrect output after reset");

    // Test case 5: Data change
    $display("Test Case 5: Data change");
    reset = 0;
    data_in = 0;
    #10;
    if (data_out !== 8'b00000000)
      $display("ERROR: Incorrect output after data change");

    // End simulation
    $display("Simulation complete");
    $finish;
  end

endmodule
```

In the testbench module, we instantiate the shift register module and provide the necessary inputs for testing. We generate a clock signal and define the test cases to verify the correctness of the shift register module. The outputs are monitored using display statements, and any errors are reported. Finally, we end the simulation.

The testbench module tests the following cases:
1. Initial state: Verifies that the shift register starts with the correct initial state of 00000000.
2. Shift enable low: Verifies that the shift register holds the current data without shifting when the shift enable signal is low.
3. Shift enable high: Verifies that the shift register shifts the data bit on the rising edge of the clock when the shift enable signal is high.
4. Active-low reset: Verifies that the shift register resets to the initial state when the active-low reset signal is asserted.
5. Data change: Verifies that the shift register outputs the stored data when it is changed.

The testbench module can be executed using a Verilog simulator, and the correctness of the outputs can be verified using display statements or by analyzing the waveform using a waveform viewer like GTKWave.